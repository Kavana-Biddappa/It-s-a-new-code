from datetime import datetime

# Updated prediction function
def predict_for_future_date_time(future_date_time, data, model, scaler, reverse_mappings):
    """
    Predicts 9 outputs for a given future date and time by using the latest available row.

    Args:
    - future_date_time (str): Target date and time for prediction in "YYYY-MM-DD HH:MM:SS" format.
    - data (pd.DataFrame): Original dataset before preprocessing.
    - model (tf.keras.Model): Trained LSTM model.
    - scaler (MinMaxScaler): Scaler used during preprocessing.

    Returns:
    - dict: Predicted values for the specified future date and time, with original labels for one-hot encoded columns.
    """
    # Parse future date_time to confirm it's valid
    try:
        future_datetime_obj = datetime.strptime(future_date_time, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        raise ValueError("Invalid date format. Please use 'YYYY-MM-DD HH:MM:SS'.")

    # Use the last available row in the dataset as a basis for future prediction
    last_row = data.iloc[-1].drop('Date_Time').values.reshape(1, -1)
    scaled_input = scaler.transform(last_row)
    scaled_input = scaled_input.reshape((1, 1, scaled_input.shape[1]))

    # Predict with model
    prediction = model.predict(scaled_input)
    prediction = scaler.inverse_transform(np.concatenate([scaled_input[0, 0, :-9], prediction], axis=1))[:, -9:]

    # Decode one-hot predictions
    decoded_predictions = {}
    for col, mapping in reverse_mappings.items():
        one_hot_prediction = prediction[0][:len(mapping)]  # Adjust length as per your one-hot columns
        decoded_predictions[col] = decode_one_hot(one_hot_prediction, mapping)

    return decoded_predictions

# Example usage
future_date_time = "2024-11-10 14:00:00"  # Example future datetime
predicted_values = predict_for_future_date_time(future_date_time, data, model, scaler, reverse_mappings)
print(f"Predicted values for {future_date_time}: {predicted_values}")