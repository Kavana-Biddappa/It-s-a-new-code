import cv2
import numpy as np
import torch
import tensorflow as tf

# Load MoveNet model
model_dir = "C:/Users/kvsbb/movenet"  # Update path if needed
loaded_model = tf.saved_model.load(model_dir)
infer = loaded_model.signatures["serving_default"]

# Define MoveNet edges
EDGES = {
    (0, 1): 'm', (0, 2): 'c', (1, 3): 'm', (2, 4): 'c',
    (0, 5): 'm', (0, 6): 'c', (5, 7): 'm', (7, 9): 'm',
    (6, 8): 'c', (8, 10): 'c', (5, 6): 'y', (5, 11): 'm',
    (6, 12): 'c', (11, 12): 'y', (11, 13): 'm', (13, 15): 'm',
    (12, 14): 'c', (14, 16): 'c'
}

# Load the pre-trained YOLO model
yolo_model = YOLO('C:/Users/kvsbb/Downloads/best (7).pt')  # Replace with the actual path to your best.pt

# Initialize the webcam
cap = cv2.VideoCapture(0)  # 0 for the default webcam

# MoveNet inference function
def run_movenet_inference(frame):
    img = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    img = tf.image.resize_with_pad(tf.convert_to_tensor(img), 384, 640)
    input_img = tf.cast(img, dtype=tf.int32)
    input_img = tf.expand_dims(input_img, axis=0)
    results = infer(input_img)
    keypoints_with_scores = results['output_0'].numpy()[:, :, :51].reshape((6, 17, 3))
    return keypoints_with_scores

# Draw MoveNet keypoints
def draw_keypoints(frame, keypoints, confidence_threshold=0.4):
    y, x, _ = frame.shape
    shaped = np.squeeze(np.multiply(keypoints, [y, x, 1]))
    for kp in shaped:
        ky, kx, kp_conf = kp
        if kp_conf > confidence_threshold:
            cv2.circle(frame, (int(kx), int(ky)), 6, (0, 255, 0), -1)

# Draw MoveNet connections
def draw_connections(frame, keypoints, edges, confidence_threshold=0.4):
    y, x, _ = frame.shape
    shaped = np.squeeze(np.multiply(keypoints, [y, x, 1]))
    for edge in edges.keys():
        p1, p2 = edge
        y1, x1, c1 = shaped[p1]
        y2, x2, c2 = shaped[p2]
        if c1 > confidence_threshold and c2 > confidence_threshold:
            cv2.line(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 0, 255), 4)

# Process people in each frame for pose detection
def process_people_pose(frame):
    keypoints_with_scores = run_movenet_inference(frame)
    for person in keypoints_with_scores:
        draw_connections(frame, person, EDGES)
        draw_keypoints(frame, person)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()
    
    if not ret:
        print("Failed to grab frame")
        break

    # Perform detection with YOLO
    results = yolo_model(frame)
    
    # Render results on the frame
    annotated_frame = results[0].plot()  

    # Process pose detection with MoveNet
    process_people_pose(annotated_frame)

    # Get detected class IDs and the corresponding class names
    detected_classes = results[0].names
    detected_class_ids = results[0].boxes.cls.tolist()

    # Flags to check for people and helmets
    person_detected = False
    helmet_detected = False

    for class_id in detected_class_ids:
        if detected_classes[class_id] == 'person':
            person_detected = True
        if detected_classes[class_id] == 'helmet':
            helmet_detected = True

    # Flash error message if a person is detected without a helmet
    if person_detected and not helmet_detected:
        cv2.putText(annotated_frame,
                    "Error: Person without helmet detected!",
                    (50, 50), cv2.FONT_HERSHEY_SIMPLEX,
                    1.5,(0, 0, 255),2)

    # Display the resulting frame with bounding boxes and labels
    cv2.imshow('Object Detection and Pose Estimation (Press q to quit)', annotated_frame)

    # Exit on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close any open windows
cap.release()
cv2.destroyAllWindows()