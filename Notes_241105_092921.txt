import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
import joblib

# Load your data
data = pd.read_csv('your_dataset.csv')  # Replace with your file path

# Define categorical and numerical columns
categorical_cols = ['Family', 'Downtime_Description', 'Downtime_Category', 'Part_Number']
numerical_cols = ['Cycle_Time', 'Target_Parts', 'Actual_Parts', 'Downtime', 'Other_Numerical_Columns']  # Update with your numerical columns

# One-hot encode categorical columns and store reverse mappings
encoders = {}
reverse_mappings = {}

for col in categorical_cols:
    encoder = OneHotEncoder(sparse=False)
    encoded = encoder.fit_transform(data[[col]])
    encoders[col] = encoder
    reverse_mappings[col] = {tuple(vec): label for vec, label in zip(encoded, encoder.categories_[0])}
    encoded_df = pd.DataFrame(encoded, columns=encoder.get_feature_names_out([col]))
    data = pd.concat([data.drop(columns=[col]), encoded_df], axis=1)

# Scale numerical columns
scaler = MinMaxScaler()
data[numerical_cols] = scaler.fit_transform(data[numerical_cols])

# Save the scaler and encoders for later use
joblib.dump(scaler, 'scaler.save')
joblib.dump(encoders, 'encoders.save')
joblib.dump(reverse_mappings, 'reverse_mappings.save')

# Define features (X) and labels (y)
X = data.drop(columns=['Date_Time']).values  # Exclude 'Date_Time' for model input
y = X[:, -9:]  # Assuming last 9 columns are targets (update if different)

# Reshape X for LSTM input
X = np.reshape(X[:, :-9], (X.shape[0], 1, X.shape[1] - 9))  # Input shape for LSTM

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build LSTM model
model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape=(X.shape[1], X.shape[2])))
model.add(Dropout(0.2))
model.add(LSTM(64, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(32, activation='relu'))
model.add(Dense(9))  # 9 outputs for multivariate prediction

model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# Train the model
early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
history = model.fit(X_train, y_train, epochs=100, batch_size=64, validation_data=(X_test, y_test),
                    callbacks=[early_stop], verbose=1)

# Save the trained model
model.save('trained_lstm_model.h5')

# Function to decode one-hot predictions back to original categories
def decode_one_hot(one_hot_vector, reverse_mapping):
    one_hot_tuple = tuple(one_hot_vector)
    return reverse_mapping.get(one_hot_tuple, "Unknown")

# Prediction function for a specific date/time
def predict_for_date_time(date_time, data, model, scaler, encoders, reverse_mappings):
    """
    Predicts 9 outputs for a given date and time.

    Args:
    - date_time (str): Target date and time.
    - data (pd.DataFrame): Original dataset before preprocessing.
    - model (tf.keras.Model): Trained LSTM model.
    - scaler (MinMaxScaler): Scaler used during preprocessing.
    - encoders (dict): Dictionary of OneHotEncoders for categorical columns.
    - reverse_mappings (dict): Dictionary for decoding one-hot encoded predictions.

    Returns:
    - dict: Predicted values for the specified date and time, with original labels for one-hot encoded columns.
    """
    # Locate row just before the target date_time
    target_index = data.index[data['Date_Time'] == date_time].tolist()
    if not target_index:
        raise ValueError("Date and time not found in the dataset.")
    target_index = target_index[0] - 1

    # Prepare input features by scaling and encoding
    input_data = data.iloc[target_index].drop('Date_Time').copy()

    # One-hot encode categorical columns
    for col, encoder in encoders.items():
        encoded = encoder.transform([[input_data[col]]])
        input_data = input_data.drop(columns=[col])
        encoded_df = pd.DataFrame(encoded, columns=encoder.get_feature_names_out([col]))
        input_data = pd.concat([input_data, encoded_df], axis=1)

    # Scale numerical columns
    input_data[numerical_cols] = scaler.transform(input_data[numerical_cols].values.reshape(1, -1))

    # Reshape to match model input shape (1, 1, feature_count)
    input_data = input_data.values.reshape((1, 1, input_data.shape[1]))

    # Predict with model
    prediction = model.predict(input_data)
    prediction = scaler.inverse_transform(prediction)

    # Decode one-hot predictions (optional, if needed)
    decoded_predictions = {}
    for col, mapping in reverse_mappings.items():
        one_hot_prediction = prediction[0][:len(mapping)]
        decoded_predictions[col] = decode_one_hot(one_hot_prediction, mapping)

    return decoded_predictions

# Example usage
date_time = "2024-11-02 12:00:00"  # Example datetime
predicted_values = predict_for_date_time(date_time, data, model, scaler, encoders, reverse_mappings)
print(f"Predicted values for {date_time}: {predicted_values}")